<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js"></script>
  <script type="text/javascript" src="http://code.jquery.com/qunit/git/qunit.js"></script>
  <script type="text/javascript" src="../croaker/js/xml-to-json/jquery.xml2json.pack.js"></script>
  <script type="text/javascript" src="../croaker/js/underscore/underscore-min.js"></script>
  <script type="text/javascript" src="../croaker/js/croaker/croaker.js"></script>

  <link rel="stylesheet" href="http://code.jquery.com/qunit/git/qunit.css" type="text/css" media="screen" />

  <script type="text/javascript">
    $(document).ready(function () {
      var loadedFiles = {};
      var parsed = {};

      var loader = function (key, path) {
        return $.get(path, function (xml) {
          loadedFiles[key] = xml;
        });
      };

      var parse = function () {
        parsed['basic'] = Croaker.parser.parse(loadedFiles['basic']);
        parsed['missing'] = Croaker.parser.parse(loadedFiles['missing']);
        start();
      }

      stop();
      $.when(loader('basic', 'data/basic.xml'), loader('missing', 'data/missing_members.xml'))
       .done(parse);

      module('module class tests');
      test('test defaults', function () {
        var mod = Croaker.module('aname', 'version');
        equals(mod.name, 'aname');
        equals(mod.version, 'version');
        equals(mod.tag, 'MOD');
        equals(mod.namespaces.length, 0);
        equals(mod.metrics.length, 0);
      });

      test('test add namespaces', function () {
        var mod = Croaker.module('aname', 'version');
        var ns = Croaker.namespace('ns1');
        mod.add([ns]);
        deepEqual(mod.namespaces, [ns]);
        mod.add([ns, ns]);
        deepEqual(mod.namespaces, [ns, ns, ns]);
        equals(mod.metrics.length, 0);
      });

      module('namespace class tests');
      test('test defaults', function () {
        var ns = Croaker.namespace('aname');
        equals(ns.name, 'aname');
        equals(ns.tag, 'NS');
        equals(ns.types.length, 0);
        equals(ns.metrics.length, 0);
      });

      test('test add types', function () {
        var ns = Croaker.namespace('aname');
        var type = Croaker.type('t1');
        ns.add([type]);
        deepEqual(ns.types, [type]);
        ns.add([type, type]);
        deepEqual(ns.types, [type, type, type]);
        equals(ns.metrics.length, 0);
      });

      module('type class tests');
      test('test defaults', function () {
        var type = Croaker.type('aname');
        equals(type.name, 'aname');
        equals(type.tag, 'TY');
        equals(type.members.length, 0);
        equals(type.metrics.length, 0);
      });

      test('test add members', function () {
        var type = Croaker.type('aname');
        var member = Croaker.member('m1');
        type.add([member]);
        deepEqual(type.members, [member]);
        type.add([member, member]);
        deepEqual(type.members, [member, member, member]);
        equals(type.metrics.length, 0);
      });

      module('member class tests');
      test('test defaults', function () {
        var member = Croaker.member('aname');
        equals(member.name, 'aname');
        equals(member.tag, 'M');
        equals(member.metrics.length, 0);
      });

      test('test add metrics', function () {
        var member = Croaker.member('aname');
        var metric = Croaker.metric('m1', 33, member);
        member.addmetrics([metric]);
        equals(member.metrics.length, 1);
        equals(member.metrics[0], metric);
        member.addmetrics([metric, metric]);
        equals(member.metrics.length, 3);
        equals(member.metrics[0], metric);
        equals(member.metrics[1], metric);
        equals(member.metrics[2], metric);
      });

      module('metric class tests');
      test('test defaults', function () {
        var metric = Croaker.metric('aname', 33);
        equals(metric.name, 'aname');
        equals(metric.value, 33);
      });

      module('parse tests');
      test('module parsing', function () {
        equals(parsed['basic'].name, 'Some.dll');
        equals(parsed['basic'].version, '1.0.2.3');
        equals(parsed['basic'].namespaces.length, 1);
      });

      test('namespace parsing', function () {
        var ns = parsed['basic'].namespaces[0];
        equals(ns.name, 'Sample.Core');
        equals(ns.types.length, 1);
      });

      test('type parsing', function () {
        var type = parsed['basic'].namespaces[0].types[0];
        equals(type.name, 'SampleClass');
        equals(type.members.length, 2);
      });

      test('member parsing', function () {
        var members = parsed['basic'].namespaces[0].types[0].members;
        equals(members[0].name, 'Method1(String) : void');
        equals(members[1].name, 'SampleClass()');
      });

      test('full metric parsing', function () {
        var members = parsed['basic'].namespaces[0].types[0].members;
        equals(members[0].metrics.length, 5);
        equals(members[0].metrics[0].name, 'ClassCoupling');
        equals(members[0].metrics[0].value, 11);
        equals(members[0].metrics[1].name, 'CyclomaticComplexity');
        equals(members[0].metrics[1].value, 8);
        equals(members[0].metrics[2].name, 'DepthOfInheritance');
        equals(members[0].metrics[2].value, 2);
        equals(members[0].metrics[3].name, 'LinesOfCode');
        equals(members[0].metrics[3].value, 6);
        equals(members[0].metrics[4].name, 'MaintainabilityIndex');
        equals(members[0].metrics[4].value, 7);
      });

      test('partial metric parsing', function () {
        var members = parsed['basic'].namespaces[0].types[0].members;
        equals(members[1].metrics.length, 5);
        equals(members[1].metrics[0].name, 'ClassCoupling');
        equals(members[1].metrics[0].value, 'N/A');
        equals(members[1].metrics[1].name, 'CyclomaticComplexity');
        equals(members[1].metrics[1].value, 10);
        equals(members[1].metrics[2].name, 'DepthOfInheritance');
        equals(members[1].metrics[2].value, 'N/A');
        equals(members[1].metrics[3].name, 'LinesOfCode');
        equals(members[1].metrics[3].value, 'N/A');
        equals(members[1].metrics[4].name, 'MaintainabilityIndex');
        equals(members[1].metrics[4].value, 9);
      });

      test('parsing type with no members', function () {
        equals(parsed['missing'].namespaces[0].types[0].members.length, 0);
      });

      module('metric definition tests');
      test('genera', function () {
        equals(Croaker.metricDefs.length, 5);
      });

      test('class coupling definition', function () {
        equals(Croaker.metricDefs[0].name, 'ClassCoupling');
        equals(Croaker.metricDefs[0].friendlyName, 'Class Coupling');
        equals(Croaker.metricDefs[0].shortName, 'CC');
      });

      test('depth of inheritance definition', function () {
        equals(Croaker.metricDefs[1].name, 'DepthOfInheritance');
        equals(Croaker.metricDefs[1].friendlyName, 'Depth of Inheritance');
        equals(Croaker.metricDefs[1].shortName, 'DoI');
      });

      test('cyclomatic complexity definition', function () {
        equals(Croaker.metricDefs[2].name, 'CyclomaticComplexity');
        equals(Croaker.metricDefs[2].friendlyName, 'Cyclomatic Complexity');
        equals(Croaker.metricDefs[2].shortName, 'CYC');
      });

      test('lines of code definition', function () {
        equals(Croaker.metricDefs[3].name, 'LinesOfCode');
        equals(Croaker.metricDefs[3].friendlyName, 'Lines of Code');
        equals(Croaker.metricDefs[3].shortName, 'LoC');
      });

      test('maintainability index definition', function () {
        equals(Croaker.metricDefs[4].name, 'MaintainabilityIndex');
        equals(Croaker.metricDefs[4].friendlyName, 'Maintainability Index');
        equals(Croaker.metricDefs[4].shortName, 'MI');
      });
    });
  </script>
</head>
<body>
  <h1 id="qunit-header">
    Croaker Unit Tests</h1>
  <h2 id="qunit-banner">
  </h2>
  <div id="qunit-testrunner-toolbar">
  </div>
  <h2 id="qunit-userAgent">
  </h2>
  <ol id="qunit-tests">
  </ol>
  <div id="qunit-fixture">
    test markup, will be hidden
  </div>
</body>
</html>
